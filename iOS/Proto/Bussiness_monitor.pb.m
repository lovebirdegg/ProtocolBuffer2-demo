// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Bussiness_monitor.pb.h"
// @@protoc_insertion_point(imports)

@implementation BussinessMonitorRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BussinessMonitorRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface monitor_bussiness_type ()
@property UInt32 mainType;
@property UInt32 subType;
@end

@implementation monitor_bussiness_type

- (BOOL) hasMainType {
  return !!hasMainType_;
}
- (void) setHasMainType:(BOOL) _value_ {
  hasMainType_ = !!_value_;
}
@synthesize mainType;
- (BOOL) hasSubType {
  return !!hasSubType_;
}
- (void) setHasSubType:(BOOL) _value_ {
  hasSubType_ = !!_value_;
}
@synthesize subType;
- (instancetype) init {
  if ((self = [super init])) {
    self.mainType = 0;
    self.subType = 0;
  }
  return self;
}
static monitor_bussiness_type* defaultmonitor_bussiness_typeInstance = nil;
+ (void) initialize {
  if (self == [monitor_bussiness_type class]) {
    defaultmonitor_bussiness_typeInstance = [[monitor_bussiness_type alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultmonitor_bussiness_typeInstance;
}
- (instancetype) defaultInstance {
  return defaultmonitor_bussiness_typeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMainType) {
    return NO;
  }
  if (!self.hasSubType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMainType) {
    [output writeUInt32:1 value:self.mainType];
  }
  if (self.hasSubType) {
    [output writeUInt32:2 value:self.subType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMainType) {
    size_ += computeUInt32Size(1, self.mainType);
  }
  if (self.hasSubType) {
    size_ += computeUInt32Size(2, self.subType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (monitor_bussiness_type*) parseFromData:(NSData*) data {
  return (monitor_bussiness_type*)[[[monitor_bussiness_type builder] mergeFromData:data] build];
}
+ (monitor_bussiness_type*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (monitor_bussiness_type*)[[[monitor_bussiness_type builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (monitor_bussiness_type*) parseFromInputStream:(NSInputStream*) input {
  return (monitor_bussiness_type*)[[[monitor_bussiness_type builder] mergeFromInputStream:input] build];
}
+ (monitor_bussiness_type*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (monitor_bussiness_type*)[[[monitor_bussiness_type builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (monitor_bussiness_type*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (monitor_bussiness_type*)[[[monitor_bussiness_type builder] mergeFromCodedInputStream:input] build];
}
+ (monitor_bussiness_type*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (monitor_bussiness_type*)[[[monitor_bussiness_type builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (monitor_bussiness_typeBuilder*) builder {
  return [[monitor_bussiness_typeBuilder alloc] init];
}
+ (monitor_bussiness_typeBuilder*) builderWithPrototype:(monitor_bussiness_type*) prototype {
  return [[monitor_bussiness_type builder] mergeFrom:prototype];
}
- (monitor_bussiness_typeBuilder*) builder {
  return [monitor_bussiness_type builder];
}
- (monitor_bussiness_typeBuilder*) toBuilder {
  return [monitor_bussiness_type builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMainType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mainType", [NSNumber numberWithInteger:self.mainType]];
  }
  if (self.hasSubType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subType", [NSNumber numberWithInteger:self.subType]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMainType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.mainType] forKey: @"mainType"];
  }
  if (self.hasSubType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.subType] forKey: @"subType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[monitor_bussiness_type class]]) {
    return NO;
  }
  monitor_bussiness_type *otherMessage = other;
  return
      self.hasMainType == otherMessage.hasMainType &&
      (!self.hasMainType || self.mainType == otherMessage.mainType) &&
      self.hasSubType == otherMessage.hasSubType &&
      (!self.hasSubType || self.subType == otherMessage.subType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMainType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mainType] hash];
  }
  if (self.hasSubType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.subType] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface monitor_bussiness_typeBuilder()
@property (strong) monitor_bussiness_type* resultMonitorBussinessType;
@end

@implementation monitor_bussiness_typeBuilder
@synthesize resultMonitorBussinessType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMonitorBussinessType = [[monitor_bussiness_type alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMonitorBussinessType;
}
- (monitor_bussiness_typeBuilder*) clear {
  self.resultMonitorBussinessType = [[monitor_bussiness_type alloc] init];
  return self;
}
- (monitor_bussiness_typeBuilder*) clone {
  return [monitor_bussiness_type builderWithPrototype:resultMonitorBussinessType];
}
- (monitor_bussiness_type*) defaultInstance {
  return [monitor_bussiness_type defaultInstance];
}
- (monitor_bussiness_type*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (monitor_bussiness_type*) buildPartial {
  monitor_bussiness_type* returnMe = resultMonitorBussinessType;
  self.resultMonitorBussinessType = nil;
  return returnMe;
}
- (monitor_bussiness_typeBuilder*) mergeFrom:(monitor_bussiness_type*) other {
  if (other == [monitor_bussiness_type defaultInstance]) {
    return self;
  }
  if (other.hasMainType) {
    [self setMainType:other.mainType];
  }
  if (other.hasSubType) {
    [self setSubType:other.subType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (monitor_bussiness_typeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (monitor_bussiness_typeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMainType:[input readUInt32]];
        break;
      }
      case 16: {
        [self setSubType:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMainType {
  return resultMonitorBussinessType.hasMainType;
}
- (UInt32) mainType {
  return resultMonitorBussinessType.mainType;
}
- (monitor_bussiness_typeBuilder*) setMainType:(UInt32) value {
  resultMonitorBussinessType.hasMainType = YES;
  resultMonitorBussinessType.mainType = value;
  return self;
}
- (monitor_bussiness_typeBuilder*) clearMainType {
  resultMonitorBussinessType.hasMainType = NO;
  resultMonitorBussinessType.mainType = 0;
  return self;
}
- (BOOL) hasSubType {
  return resultMonitorBussinessType.hasSubType;
}
- (UInt32) subType {
  return resultMonitorBussinessType.subType;
}
- (monitor_bussiness_typeBuilder*) setSubType:(UInt32) value {
  resultMonitorBussinessType.hasSubType = YES;
  resultMonitorBussinessType.subType = value;
  return self;
}
- (monitor_bussiness_typeBuilder*) clearSubType {
  resultMonitorBussinessType.hasSubType = NO;
  resultMonitorBussinessType.subType = 0;
  return self;
}
@end

@interface bussiness_monitor_item ()
@property (strong) monitor_bussiness_type* bussinessType;
@property UInt64 ts;
@property UInt32 totalTime;
@property UInt32 count;
@property UInt32 maxTime;
@property UInt32 minTime;
@property UInt32 succeedCount;
@property UInt32 type;
@property UInt32 maxInstanceId;
@property UInt32 minInstanceId;
@end

@implementation bussiness_monitor_item

- (BOOL) hasBussinessType {
  return !!hasBussinessType_;
}
- (void) setHasBussinessType:(BOOL) _value_ {
  hasBussinessType_ = !!_value_;
}
@synthesize bussinessType;
- (BOOL) hasTs {
  return !!hasTs_;
}
- (void) setHasTs:(BOOL) _value_ {
  hasTs_ = !!_value_;
}
@synthesize ts;
- (BOOL) hasTotalTime {
  return !!hasTotalTime_;
}
- (void) setHasTotalTime:(BOOL) _value_ {
  hasTotalTime_ = !!_value_;
}
@synthesize totalTime;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasMaxTime {
  return !!hasMaxTime_;
}
- (void) setHasMaxTime:(BOOL) _value_ {
  hasMaxTime_ = !!_value_;
}
@synthesize maxTime;
- (BOOL) hasMinTime {
  return !!hasMinTime_;
}
- (void) setHasMinTime:(BOOL) _value_ {
  hasMinTime_ = !!_value_;
}
@synthesize minTime;
- (BOOL) hasSucceedCount {
  return !!hasSucceedCount_;
}
- (void) setHasSucceedCount:(BOOL) _value_ {
  hasSucceedCount_ = !!_value_;
}
@synthesize succeedCount;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasMaxInstanceId {
  return !!hasMaxInstanceId_;
}
- (void) setHasMaxInstanceId:(BOOL) _value_ {
  hasMaxInstanceId_ = !!_value_;
}
@synthesize maxInstanceId;
- (BOOL) hasMinInstanceId {
  return !!hasMinInstanceId_;
}
- (void) setHasMinInstanceId:(BOOL) _value_ {
  hasMinInstanceId_ = !!_value_;
}
@synthesize minInstanceId;
- (instancetype) init {
  if ((self = [super init])) {
    self.bussinessType = [monitor_bussiness_type defaultInstance];
    self.ts = 0L;
    self.totalTime = 0;
    self.count = 0;
    self.maxTime = 0;
    self.minTime = 0;
    self.succeedCount = 0;
    self.type = 0;
    self.maxInstanceId = 0;
    self.minInstanceId = 0;
  }
  return self;
}
static bussiness_monitor_item* defaultbussiness_monitor_itemInstance = nil;
+ (void) initialize {
  if (self == [bussiness_monitor_item class]) {
    defaultbussiness_monitor_itemInstance = [[bussiness_monitor_item alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultbussiness_monitor_itemInstance;
}
- (instancetype) defaultInstance {
  return defaultbussiness_monitor_itemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBussinessType) {
    return NO;
  }
  if (!self.bussinessType.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBussinessType) {
    [output writeMessage:1 value:self.bussinessType];
  }
  if (self.hasTs) {
    [output writeUInt64:2 value:self.ts];
  }
  if (self.hasTotalTime) {
    [output writeUInt32:3 value:self.totalTime];
  }
  if (self.hasCount) {
    [output writeUInt32:4 value:self.count];
  }
  if (self.hasMaxTime) {
    [output writeUInt32:5 value:self.maxTime];
  }
  if (self.hasMinTime) {
    [output writeUInt32:6 value:self.minTime];
  }
  if (self.hasSucceedCount) {
    [output writeUInt32:7 value:self.succeedCount];
  }
  if (self.hasType) {
    [output writeUInt32:8 value:self.type];
  }
  if (self.hasMaxInstanceId) {
    [output writeUInt32:9 value:self.maxInstanceId];
  }
  if (self.hasMinInstanceId) {
    [output writeUInt32:10 value:self.minInstanceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBussinessType) {
    size_ += computeMessageSize(1, self.bussinessType);
  }
  if (self.hasTs) {
    size_ += computeUInt64Size(2, self.ts);
  }
  if (self.hasTotalTime) {
    size_ += computeUInt32Size(3, self.totalTime);
  }
  if (self.hasCount) {
    size_ += computeUInt32Size(4, self.count);
  }
  if (self.hasMaxTime) {
    size_ += computeUInt32Size(5, self.maxTime);
  }
  if (self.hasMinTime) {
    size_ += computeUInt32Size(6, self.minTime);
  }
  if (self.hasSucceedCount) {
    size_ += computeUInt32Size(7, self.succeedCount);
  }
  if (self.hasType) {
    size_ += computeUInt32Size(8, self.type);
  }
  if (self.hasMaxInstanceId) {
    size_ += computeUInt32Size(9, self.maxInstanceId);
  }
  if (self.hasMinInstanceId) {
    size_ += computeUInt32Size(10, self.minInstanceId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (bussiness_monitor_item*) parseFromData:(NSData*) data {
  return (bussiness_monitor_item*)[[[bussiness_monitor_item builder] mergeFromData:data] build];
}
+ (bussiness_monitor_item*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_item*)[[[bussiness_monitor_item builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_item*) parseFromInputStream:(NSInputStream*) input {
  return (bussiness_monitor_item*)[[[bussiness_monitor_item builder] mergeFromInputStream:input] build];
}
+ (bussiness_monitor_item*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_item*)[[[bussiness_monitor_item builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_item*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (bussiness_monitor_item*)[[[bussiness_monitor_item builder] mergeFromCodedInputStream:input] build];
}
+ (bussiness_monitor_item*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_item*)[[[bussiness_monitor_item builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_itemBuilder*) builder {
  return [[bussiness_monitor_itemBuilder alloc] init];
}
+ (bussiness_monitor_itemBuilder*) builderWithPrototype:(bussiness_monitor_item*) prototype {
  return [[bussiness_monitor_item builder] mergeFrom:prototype];
}
- (bussiness_monitor_itemBuilder*) builder {
  return [bussiness_monitor_item builder];
}
- (bussiness_monitor_itemBuilder*) toBuilder {
  return [bussiness_monitor_item builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBussinessType) {
    [output appendFormat:@"%@%@ {\n", indent, @"bussinessType"];
    [self.bussinessType writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ts", [NSNumber numberWithLongLong:self.ts]];
  }
  if (self.hasTotalTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalTime", [NSNumber numberWithInteger:self.totalTime]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasMaxTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxTime", [NSNumber numberWithInteger:self.maxTime]];
  }
  if (self.hasMinTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minTime", [NSNumber numberWithInteger:self.minTime]];
  }
  if (self.hasSucceedCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"succeedCount", [NSNumber numberWithInteger:self.succeedCount]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasMaxInstanceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxInstanceId", [NSNumber numberWithInteger:self.maxInstanceId]];
  }
  if (self.hasMinInstanceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minInstanceId", [NSNumber numberWithInteger:self.minInstanceId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBussinessType) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.bussinessType storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"bussinessType"];
  }
  if (self.hasTs) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.ts] forKey: @"ts"];
  }
  if (self.hasTotalTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalTime] forKey: @"totalTime"];
  }
  if (self.hasCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.count] forKey: @"count"];
  }
  if (self.hasMaxTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxTime] forKey: @"maxTime"];
  }
  if (self.hasMinTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.minTime] forKey: @"minTime"];
  }
  if (self.hasSucceedCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.succeedCount] forKey: @"succeedCount"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasMaxInstanceId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxInstanceId] forKey: @"maxInstanceId"];
  }
  if (self.hasMinInstanceId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.minInstanceId] forKey: @"minInstanceId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[bussiness_monitor_item class]]) {
    return NO;
  }
  bussiness_monitor_item *otherMessage = other;
  return
      self.hasBussinessType == otherMessage.hasBussinessType &&
      (!self.hasBussinessType || [self.bussinessType isEqual:otherMessage.bussinessType]) &&
      self.hasTs == otherMessage.hasTs &&
      (!self.hasTs || self.ts == otherMessage.ts) &&
      self.hasTotalTime == otherMessage.hasTotalTime &&
      (!self.hasTotalTime || self.totalTime == otherMessage.totalTime) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasMaxTime == otherMessage.hasMaxTime &&
      (!self.hasMaxTime || self.maxTime == otherMessage.maxTime) &&
      self.hasMinTime == otherMessage.hasMinTime &&
      (!self.hasMinTime || self.minTime == otherMessage.minTime) &&
      self.hasSucceedCount == otherMessage.hasSucceedCount &&
      (!self.hasSucceedCount || self.succeedCount == otherMessage.succeedCount) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMaxInstanceId == otherMessage.hasMaxInstanceId &&
      (!self.hasMaxInstanceId || self.maxInstanceId == otherMessage.maxInstanceId) &&
      self.hasMinInstanceId == otherMessage.hasMinInstanceId &&
      (!self.hasMinInstanceId || self.minInstanceId == otherMessage.minInstanceId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBussinessType) {
    hashCode = hashCode * 31 + [self.bussinessType hash];
  }
  if (self.hasTs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.ts] hash];
  }
  if (self.hasTotalTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalTime] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasMaxTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxTime] hash];
  }
  if (self.hasMinTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.minTime] hash];
  }
  if (self.hasSucceedCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.succeedCount] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasMaxInstanceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxInstanceId] hash];
  }
  if (self.hasMinInstanceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.minInstanceId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface bussiness_monitor_itemBuilder()
@property (strong) bussiness_monitor_item* resultBussinessMonitorItem;
@end

@implementation bussiness_monitor_itemBuilder
@synthesize resultBussinessMonitorItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBussinessMonitorItem = [[bussiness_monitor_item alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBussinessMonitorItem;
}
- (bussiness_monitor_itemBuilder*) clear {
  self.resultBussinessMonitorItem = [[bussiness_monitor_item alloc] init];
  return self;
}
- (bussiness_monitor_itemBuilder*) clone {
  return [bussiness_monitor_item builderWithPrototype:resultBussinessMonitorItem];
}
- (bussiness_monitor_item*) defaultInstance {
  return [bussiness_monitor_item defaultInstance];
}
- (bussiness_monitor_item*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (bussiness_monitor_item*) buildPartial {
  bussiness_monitor_item* returnMe = resultBussinessMonitorItem;
  self.resultBussinessMonitorItem = nil;
  return returnMe;
}
- (bussiness_monitor_itemBuilder*) mergeFrom:(bussiness_monitor_item*) other {
  if (other == [bussiness_monitor_item defaultInstance]) {
    return self;
  }
  if (other.hasBussinessType) {
    [self mergeBussinessType:other.bussinessType];
  }
  if (other.hasTs) {
    [self setTs:other.ts];
  }
  if (other.hasTotalTime) {
    [self setTotalTime:other.totalTime];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasMaxTime) {
    [self setMaxTime:other.maxTime];
  }
  if (other.hasMinTime) {
    [self setMinTime:other.minTime];
  }
  if (other.hasSucceedCount) {
    [self setSucceedCount:other.succeedCount];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMaxInstanceId) {
    [self setMaxInstanceId:other.maxInstanceId];
  }
  if (other.hasMinInstanceId) {
    [self setMinInstanceId:other.minInstanceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (bussiness_monitor_itemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (bussiness_monitor_itemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        monitor_bussiness_typeBuilder* subBuilder = [monitor_bussiness_type builder];
        if (self.hasBussinessType) {
          [subBuilder mergeFrom:self.bussinessType];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBussinessType:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setTs:[input readUInt64]];
        break;
      }
      case 24: {
        [self setTotalTime:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCount:[input readUInt32]];
        break;
      }
      case 40: {
        [self setMaxTime:[input readUInt32]];
        break;
      }
      case 48: {
        [self setMinTime:[input readUInt32]];
        break;
      }
      case 56: {
        [self setSucceedCount:[input readUInt32]];
        break;
      }
      case 64: {
        [self setType:[input readUInt32]];
        break;
      }
      case 72: {
        [self setMaxInstanceId:[input readUInt32]];
        break;
      }
      case 80: {
        [self setMinInstanceId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBussinessType {
  return resultBussinessMonitorItem.hasBussinessType;
}
- (monitor_bussiness_type*) bussinessType {
  return resultBussinessMonitorItem.bussinessType;
}
- (bussiness_monitor_itemBuilder*) setBussinessType:(monitor_bussiness_type*) value {
  resultBussinessMonitorItem.hasBussinessType = YES;
  resultBussinessMonitorItem.bussinessType = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) setBussinessTypeBuilder:(monitor_bussiness_typeBuilder*) builderForValue {
  return [self setBussinessType:[builderForValue build]];
}
- (bussiness_monitor_itemBuilder*) mergeBussinessType:(monitor_bussiness_type*) value {
  if (resultBussinessMonitorItem.hasBussinessType &&
      resultBussinessMonitorItem.bussinessType != [monitor_bussiness_type defaultInstance]) {
    resultBussinessMonitorItem.bussinessType =
      [[[monitor_bussiness_type builderWithPrototype:resultBussinessMonitorItem.bussinessType] mergeFrom:value] buildPartial];
  } else {
    resultBussinessMonitorItem.bussinessType = value;
  }
  resultBussinessMonitorItem.hasBussinessType = YES;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearBussinessType {
  resultBussinessMonitorItem.hasBussinessType = NO;
  resultBussinessMonitorItem.bussinessType = [monitor_bussiness_type defaultInstance];
  return self;
}
- (BOOL) hasTs {
  return resultBussinessMonitorItem.hasTs;
}
- (UInt64) ts {
  return resultBussinessMonitorItem.ts;
}
- (bussiness_monitor_itemBuilder*) setTs:(UInt64) value {
  resultBussinessMonitorItem.hasTs = YES;
  resultBussinessMonitorItem.ts = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearTs {
  resultBussinessMonitorItem.hasTs = NO;
  resultBussinessMonitorItem.ts = 0L;
  return self;
}
- (BOOL) hasTotalTime {
  return resultBussinessMonitorItem.hasTotalTime;
}
- (UInt32) totalTime {
  return resultBussinessMonitorItem.totalTime;
}
- (bussiness_monitor_itemBuilder*) setTotalTime:(UInt32) value {
  resultBussinessMonitorItem.hasTotalTime = YES;
  resultBussinessMonitorItem.totalTime = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearTotalTime {
  resultBussinessMonitorItem.hasTotalTime = NO;
  resultBussinessMonitorItem.totalTime = 0;
  return self;
}
- (BOOL) hasCount {
  return resultBussinessMonitorItem.hasCount;
}
- (UInt32) count {
  return resultBussinessMonitorItem.count;
}
- (bussiness_monitor_itemBuilder*) setCount:(UInt32) value {
  resultBussinessMonitorItem.hasCount = YES;
  resultBussinessMonitorItem.count = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearCount {
  resultBussinessMonitorItem.hasCount = NO;
  resultBussinessMonitorItem.count = 0;
  return self;
}
- (BOOL) hasMaxTime {
  return resultBussinessMonitorItem.hasMaxTime;
}
- (UInt32) maxTime {
  return resultBussinessMonitorItem.maxTime;
}
- (bussiness_monitor_itemBuilder*) setMaxTime:(UInt32) value {
  resultBussinessMonitorItem.hasMaxTime = YES;
  resultBussinessMonitorItem.maxTime = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearMaxTime {
  resultBussinessMonitorItem.hasMaxTime = NO;
  resultBussinessMonitorItem.maxTime = 0;
  return self;
}
- (BOOL) hasMinTime {
  return resultBussinessMonitorItem.hasMinTime;
}
- (UInt32) minTime {
  return resultBussinessMonitorItem.minTime;
}
- (bussiness_monitor_itemBuilder*) setMinTime:(UInt32) value {
  resultBussinessMonitorItem.hasMinTime = YES;
  resultBussinessMonitorItem.minTime = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearMinTime {
  resultBussinessMonitorItem.hasMinTime = NO;
  resultBussinessMonitorItem.minTime = 0;
  return self;
}
- (BOOL) hasSucceedCount {
  return resultBussinessMonitorItem.hasSucceedCount;
}
- (UInt32) succeedCount {
  return resultBussinessMonitorItem.succeedCount;
}
- (bussiness_monitor_itemBuilder*) setSucceedCount:(UInt32) value {
  resultBussinessMonitorItem.hasSucceedCount = YES;
  resultBussinessMonitorItem.succeedCount = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearSucceedCount {
  resultBussinessMonitorItem.hasSucceedCount = NO;
  resultBussinessMonitorItem.succeedCount = 0;
  return self;
}
- (BOOL) hasType {
  return resultBussinessMonitorItem.hasType;
}
- (UInt32) type {
  return resultBussinessMonitorItem.type;
}
- (bussiness_monitor_itemBuilder*) setType:(UInt32) value {
  resultBussinessMonitorItem.hasType = YES;
  resultBussinessMonitorItem.type = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearType {
  resultBussinessMonitorItem.hasType = NO;
  resultBussinessMonitorItem.type = 0;
  return self;
}
- (BOOL) hasMaxInstanceId {
  return resultBussinessMonitorItem.hasMaxInstanceId;
}
- (UInt32) maxInstanceId {
  return resultBussinessMonitorItem.maxInstanceId;
}
- (bussiness_monitor_itemBuilder*) setMaxInstanceId:(UInt32) value {
  resultBussinessMonitorItem.hasMaxInstanceId = YES;
  resultBussinessMonitorItem.maxInstanceId = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearMaxInstanceId {
  resultBussinessMonitorItem.hasMaxInstanceId = NO;
  resultBussinessMonitorItem.maxInstanceId = 0;
  return self;
}
- (BOOL) hasMinInstanceId {
  return resultBussinessMonitorItem.hasMinInstanceId;
}
- (UInt32) minInstanceId {
  return resultBussinessMonitorItem.minInstanceId;
}
- (bussiness_monitor_itemBuilder*) setMinInstanceId:(UInt32) value {
  resultBussinessMonitorItem.hasMinInstanceId = YES;
  resultBussinessMonitorItem.minInstanceId = value;
  return self;
}
- (bussiness_monitor_itemBuilder*) clearMinInstanceId {
  resultBussinessMonitorItem.hasMinInstanceId = NO;
  resultBussinessMonitorItem.minInstanceId = 0;
  return self;
}
@end

@interface monitor_user_status ()
@property (strong) NSString* userName;
@property UInt32 status;
@property UInt32 deviceType;
@property UInt32 flag;
@property UInt32 instanceId;
@end

@implementation monitor_user_status

- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) _value_ {
  hasDeviceType_ = !!_value_;
}
@synthesize deviceType;
- (BOOL) hasFlag {
  return !!hasFlag_;
}
- (void) setHasFlag:(BOOL) _value_ {
  hasFlag_ = !!_value_;
}
@synthesize flag;
- (BOOL) hasInstanceId {
  return !!hasInstanceId_;
}
- (void) setHasInstanceId:(BOOL) _value_ {
  hasInstanceId_ = !!_value_;
}
@synthesize instanceId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userName = @"";
    self.status = 0;
    self.deviceType = 0;
    self.flag = 0;
    self.instanceId = 0;
  }
  return self;
}
static monitor_user_status* defaultmonitor_user_statusInstance = nil;
+ (void) initialize {
  if (self == [monitor_user_status class]) {
    defaultmonitor_user_statusInstance = [[monitor_user_status alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultmonitor_user_statusInstance;
}
- (instancetype) defaultInstance {
  return defaultmonitor_user_statusInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.hasDeviceType) {
    return NO;
  }
  if (!self.hasFlag) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserName) {
    [output writeString:1 value:self.userName];
  }
  if (self.hasStatus) {
    [output writeUInt32:2 value:self.status];
  }
  if (self.hasDeviceType) {
    [output writeUInt32:3 value:self.deviceType];
  }
  if (self.hasFlag) {
    [output writeUInt32:4 value:self.flag];
  }
  if (self.hasInstanceId) {
    [output writeUInt32:5 value:self.instanceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserName) {
    size_ += computeStringSize(1, self.userName);
  }
  if (self.hasStatus) {
    size_ += computeUInt32Size(2, self.status);
  }
  if (self.hasDeviceType) {
    size_ += computeUInt32Size(3, self.deviceType);
  }
  if (self.hasFlag) {
    size_ += computeUInt32Size(4, self.flag);
  }
  if (self.hasInstanceId) {
    size_ += computeUInt32Size(5, self.instanceId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (monitor_user_status*) parseFromData:(NSData*) data {
  return (monitor_user_status*)[[[monitor_user_status builder] mergeFromData:data] build];
}
+ (monitor_user_status*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (monitor_user_status*)[[[monitor_user_status builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (monitor_user_status*) parseFromInputStream:(NSInputStream*) input {
  return (monitor_user_status*)[[[monitor_user_status builder] mergeFromInputStream:input] build];
}
+ (monitor_user_status*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (monitor_user_status*)[[[monitor_user_status builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (monitor_user_status*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (monitor_user_status*)[[[monitor_user_status builder] mergeFromCodedInputStream:input] build];
}
+ (monitor_user_status*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (monitor_user_status*)[[[monitor_user_status builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (monitor_user_statusBuilder*) builder {
  return [[monitor_user_statusBuilder alloc] init];
}
+ (monitor_user_statusBuilder*) builderWithPrototype:(monitor_user_status*) prototype {
  return [[monitor_user_status builder] mergeFrom:prototype];
}
- (monitor_user_statusBuilder*) builder {
  return [monitor_user_status builder];
}
- (monitor_user_statusBuilder*) toBuilder {
  return [monitor_user_status builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", [NSNumber numberWithInteger:self.deviceType]];
  }
  if (self.hasFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flag", [NSNumber numberWithInteger:self.flag]];
  }
  if (self.hasInstanceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"instanceId", [NSNumber numberWithInteger:self.instanceId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserName) {
    [dictionary setObject: self.userName forKey: @"userName"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasDeviceType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.deviceType] forKey: @"deviceType"];
  }
  if (self.hasFlag) {
    [dictionary setObject: [NSNumber numberWithInteger:self.flag] forKey: @"flag"];
  }
  if (self.hasInstanceId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.instanceId] forKey: @"instanceId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[monitor_user_status class]]) {
    return NO;
  }
  monitor_user_status *otherMessage = other;
  return
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || self.deviceType == otherMessage.deviceType) &&
      self.hasFlag == otherMessage.hasFlag &&
      (!self.hasFlag || self.flag == otherMessage.flag) &&
      self.hasInstanceId == otherMessage.hasInstanceId &&
      (!self.hasInstanceId || self.instanceId == otherMessage.instanceId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deviceType] hash];
  }
  if (self.hasFlag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.flag] hash];
  }
  if (self.hasInstanceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.instanceId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface monitor_user_statusBuilder()
@property (strong) monitor_user_status* resultMonitorUserStatus;
@end

@implementation monitor_user_statusBuilder
@synthesize resultMonitorUserStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMonitorUserStatus = [[monitor_user_status alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMonitorUserStatus;
}
- (monitor_user_statusBuilder*) clear {
  self.resultMonitorUserStatus = [[monitor_user_status alloc] init];
  return self;
}
- (monitor_user_statusBuilder*) clone {
  return [monitor_user_status builderWithPrototype:resultMonitorUserStatus];
}
- (monitor_user_status*) defaultInstance {
  return [monitor_user_status defaultInstance];
}
- (monitor_user_status*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (monitor_user_status*) buildPartial {
  monitor_user_status* returnMe = resultMonitorUserStatus;
  self.resultMonitorUserStatus = nil;
  return returnMe;
}
- (monitor_user_statusBuilder*) mergeFrom:(monitor_user_status*) other {
  if (other == [monitor_user_status defaultInstance]) {
    return self;
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasFlag) {
    [self setFlag:other.flag];
  }
  if (other.hasInstanceId) {
    [self setInstanceId:other.instanceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (monitor_user_statusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (monitor_user_statusBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserName:[input readString]];
        break;
      }
      case 16: {
        [self setStatus:[input readUInt32]];
        break;
      }
      case 24: {
        [self setDeviceType:[input readUInt32]];
        break;
      }
      case 32: {
        [self setFlag:[input readUInt32]];
        break;
      }
      case 40: {
        [self setInstanceId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserName {
  return resultMonitorUserStatus.hasUserName;
}
- (NSString*) userName {
  return resultMonitorUserStatus.userName;
}
- (monitor_user_statusBuilder*) setUserName:(NSString*) value {
  resultMonitorUserStatus.hasUserName = YES;
  resultMonitorUserStatus.userName = value;
  return self;
}
- (monitor_user_statusBuilder*) clearUserName {
  resultMonitorUserStatus.hasUserName = NO;
  resultMonitorUserStatus.userName = @"";
  return self;
}
- (BOOL) hasStatus {
  return resultMonitorUserStatus.hasStatus;
}
- (UInt32) status {
  return resultMonitorUserStatus.status;
}
- (monitor_user_statusBuilder*) setStatus:(UInt32) value {
  resultMonitorUserStatus.hasStatus = YES;
  resultMonitorUserStatus.status = value;
  return self;
}
- (monitor_user_statusBuilder*) clearStatus {
  resultMonitorUserStatus.hasStatus = NO;
  resultMonitorUserStatus.status = 0;
  return self;
}
- (BOOL) hasDeviceType {
  return resultMonitorUserStatus.hasDeviceType;
}
- (UInt32) deviceType {
  return resultMonitorUserStatus.deviceType;
}
- (monitor_user_statusBuilder*) setDeviceType:(UInt32) value {
  resultMonitorUserStatus.hasDeviceType = YES;
  resultMonitorUserStatus.deviceType = value;
  return self;
}
- (monitor_user_statusBuilder*) clearDeviceType {
  resultMonitorUserStatus.hasDeviceType = NO;
  resultMonitorUserStatus.deviceType = 0;
  return self;
}
- (BOOL) hasFlag {
  return resultMonitorUserStatus.hasFlag;
}
- (UInt32) flag {
  return resultMonitorUserStatus.flag;
}
- (monitor_user_statusBuilder*) setFlag:(UInt32) value {
  resultMonitorUserStatus.hasFlag = YES;
  resultMonitorUserStatus.flag = value;
  return self;
}
- (monitor_user_statusBuilder*) clearFlag {
  resultMonitorUserStatus.hasFlag = NO;
  resultMonitorUserStatus.flag = 0;
  return self;
}
- (BOOL) hasInstanceId {
  return resultMonitorUserStatus.hasInstanceId;
}
- (UInt32) instanceId {
  return resultMonitorUserStatus.instanceId;
}
- (monitor_user_statusBuilder*) setInstanceId:(UInt32) value {
  resultMonitorUserStatus.hasInstanceId = YES;
  resultMonitorUserStatus.instanceId = value;
  return self;
}
- (monitor_user_statusBuilder*) clearInstanceId {
  resultMonitorUserStatus.hasInstanceId = NO;
  resultMonitorUserStatus.instanceId = 0;
  return self;
}
@end

@interface queue_monitor_infos ()
@property UInt32 type;
@property UInt32 length;
@property UInt64 recieveLength;
@property UInt64 sendLength;
@end

@implementation queue_monitor_infos

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasLength {
  return !!hasLength_;
}
- (void) setHasLength:(BOOL) _value_ {
  hasLength_ = !!_value_;
}
@synthesize length;
- (BOOL) hasRecieveLength {
  return !!hasRecieveLength_;
}
- (void) setHasRecieveLength:(BOOL) _value_ {
  hasRecieveLength_ = !!_value_;
}
@synthesize recieveLength;
- (BOOL) hasSendLength {
  return !!hasSendLength_;
}
- (void) setHasSendLength:(BOOL) _value_ {
  hasSendLength_ = !!_value_;
}
@synthesize sendLength;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.length = 0;
    self.recieveLength = 0L;
    self.sendLength = 0L;
  }
  return self;
}
static queue_monitor_infos* defaultqueue_monitor_infosInstance = nil;
+ (void) initialize {
  if (self == [queue_monitor_infos class]) {
    defaultqueue_monitor_infosInstance = [[queue_monitor_infos alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultqueue_monitor_infosInstance;
}
- (instancetype) defaultInstance {
  return defaultqueue_monitor_infosInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasLength) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeUInt32:1 value:self.type];
  }
  if (self.hasLength) {
    [output writeUInt32:2 value:self.length];
  }
  if (self.hasRecieveLength) {
    [output writeUInt64:3 value:self.recieveLength];
  }
  if (self.hasSendLength) {
    [output writeUInt64:4 value:self.sendLength];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeUInt32Size(1, self.type);
  }
  if (self.hasLength) {
    size_ += computeUInt32Size(2, self.length);
  }
  if (self.hasRecieveLength) {
    size_ += computeUInt64Size(3, self.recieveLength);
  }
  if (self.hasSendLength) {
    size_ += computeUInt64Size(4, self.sendLength);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (queue_monitor_infos*) parseFromData:(NSData*) data {
  return (queue_monitor_infos*)[[[queue_monitor_infos builder] mergeFromData:data] build];
}
+ (queue_monitor_infos*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_infos*)[[[queue_monitor_infos builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_infos*) parseFromInputStream:(NSInputStream*) input {
  return (queue_monitor_infos*)[[[queue_monitor_infos builder] mergeFromInputStream:input] build];
}
+ (queue_monitor_infos*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_infos*)[[[queue_monitor_infos builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_infos*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (queue_monitor_infos*)[[[queue_monitor_infos builder] mergeFromCodedInputStream:input] build];
}
+ (queue_monitor_infos*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_infos*)[[[queue_monitor_infos builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_infosBuilder*) builder {
  return [[queue_monitor_infosBuilder alloc] init];
}
+ (queue_monitor_infosBuilder*) builderWithPrototype:(queue_monitor_infos*) prototype {
  return [[queue_monitor_infos builder] mergeFrom:prototype];
}
- (queue_monitor_infosBuilder*) builder {
  return [queue_monitor_infos builder];
}
- (queue_monitor_infosBuilder*) toBuilder {
  return [queue_monitor_infos builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"length", [NSNumber numberWithInteger:self.length]];
  }
  if (self.hasRecieveLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recieveLength", [NSNumber numberWithLongLong:self.recieveLength]];
  }
  if (self.hasSendLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendLength", [NSNumber numberWithLongLong:self.sendLength]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.length] forKey: @"length"];
  }
  if (self.hasRecieveLength) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.recieveLength] forKey: @"recieveLength"];
  }
  if (self.hasSendLength) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sendLength] forKey: @"sendLength"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[queue_monitor_infos class]]) {
    return NO;
  }
  queue_monitor_infos *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasLength == otherMessage.hasLength &&
      (!self.hasLength || self.length == otherMessage.length) &&
      self.hasRecieveLength == otherMessage.hasRecieveLength &&
      (!self.hasRecieveLength || self.recieveLength == otherMessage.recieveLength) &&
      self.hasSendLength == otherMessage.hasSendLength &&
      (!self.hasSendLength || self.sendLength == otherMessage.sendLength) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.length] hash];
  }
  if (self.hasRecieveLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.recieveLength] hash];
  }
  if (self.hasSendLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sendLength] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface queue_monitor_infosBuilder()
@property (strong) queue_monitor_infos* resultQueueMonitorInfos;
@end

@implementation queue_monitor_infosBuilder
@synthesize resultQueueMonitorInfos;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQueueMonitorInfos = [[queue_monitor_infos alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQueueMonitorInfos;
}
- (queue_monitor_infosBuilder*) clear {
  self.resultQueueMonitorInfos = [[queue_monitor_infos alloc] init];
  return self;
}
- (queue_monitor_infosBuilder*) clone {
  return [queue_monitor_infos builderWithPrototype:resultQueueMonitorInfos];
}
- (queue_monitor_infos*) defaultInstance {
  return [queue_monitor_infos defaultInstance];
}
- (queue_monitor_infos*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (queue_monitor_infos*) buildPartial {
  queue_monitor_infos* returnMe = resultQueueMonitorInfos;
  self.resultQueueMonitorInfos = nil;
  return returnMe;
}
- (queue_monitor_infosBuilder*) mergeFrom:(queue_monitor_infos*) other {
  if (other == [queue_monitor_infos defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasLength) {
    [self setLength:other.length];
  }
  if (other.hasRecieveLength) {
    [self setRecieveLength:other.recieveLength];
  }
  if (other.hasSendLength) {
    [self setSendLength:other.sendLength];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (queue_monitor_infosBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (queue_monitor_infosBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLength:[input readUInt32]];
        break;
      }
      case 24: {
        [self setRecieveLength:[input readUInt64]];
        break;
      }
      case 32: {
        [self setSendLength:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultQueueMonitorInfos.hasType;
}
- (UInt32) type {
  return resultQueueMonitorInfos.type;
}
- (queue_monitor_infosBuilder*) setType:(UInt32) value {
  resultQueueMonitorInfos.hasType = YES;
  resultQueueMonitorInfos.type = value;
  return self;
}
- (queue_monitor_infosBuilder*) clearType {
  resultQueueMonitorInfos.hasType = NO;
  resultQueueMonitorInfos.type = 0;
  return self;
}
- (BOOL) hasLength {
  return resultQueueMonitorInfos.hasLength;
}
- (UInt32) length {
  return resultQueueMonitorInfos.length;
}
- (queue_monitor_infosBuilder*) setLength:(UInt32) value {
  resultQueueMonitorInfos.hasLength = YES;
  resultQueueMonitorInfos.length = value;
  return self;
}
- (queue_monitor_infosBuilder*) clearLength {
  resultQueueMonitorInfos.hasLength = NO;
  resultQueueMonitorInfos.length = 0;
  return self;
}
- (BOOL) hasRecieveLength {
  return resultQueueMonitorInfos.hasRecieveLength;
}
- (UInt64) recieveLength {
  return resultQueueMonitorInfos.recieveLength;
}
- (queue_monitor_infosBuilder*) setRecieveLength:(UInt64) value {
  resultQueueMonitorInfos.hasRecieveLength = YES;
  resultQueueMonitorInfos.recieveLength = value;
  return self;
}
- (queue_monitor_infosBuilder*) clearRecieveLength {
  resultQueueMonitorInfos.hasRecieveLength = NO;
  resultQueueMonitorInfos.recieveLength = 0L;
  return self;
}
- (BOOL) hasSendLength {
  return resultQueueMonitorInfos.hasSendLength;
}
- (UInt64) sendLength {
  return resultQueueMonitorInfos.sendLength;
}
- (queue_monitor_infosBuilder*) setSendLength:(UInt64) value {
  resultQueueMonitorInfos.hasSendLength = YES;
  resultQueueMonitorInfos.sendLength = value;
  return self;
}
- (queue_monitor_infosBuilder*) clearSendLength {
  resultQueueMonitorInfos.hasSendLength = NO;
  resultQueueMonitorInfos.sendLength = 0L;
  return self;
}
@end

@interface switch_bussiness_monitor ()
@property UInt32 switches;
@end

@implementation switch_bussiness_monitor

- (BOOL) hasSwitches {
  return !!hasSwitches_;
}
- (void) setHasSwitches:(BOOL) _value_ {
  hasSwitches_ = !!_value_;
}
@synthesize switches;
- (instancetype) init {
  if ((self = [super init])) {
    self.switches = 0;
  }
  return self;
}
static switch_bussiness_monitor* defaultswitch_bussiness_monitorInstance = nil;
+ (void) initialize {
  if (self == [switch_bussiness_monitor class]) {
    defaultswitch_bussiness_monitorInstance = [[switch_bussiness_monitor alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultswitch_bussiness_monitorInstance;
}
- (instancetype) defaultInstance {
  return defaultswitch_bussiness_monitorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSwitches) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSwitches) {
    [output writeUInt32:1 value:self.switches];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSwitches) {
    size_ += computeUInt32Size(1, self.switches);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (switch_bussiness_monitor*) parseFromData:(NSData*) data {
  return (switch_bussiness_monitor*)[[[switch_bussiness_monitor builder] mergeFromData:data] build];
}
+ (switch_bussiness_monitor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (switch_bussiness_monitor*)[[[switch_bussiness_monitor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (switch_bussiness_monitor*) parseFromInputStream:(NSInputStream*) input {
  return (switch_bussiness_monitor*)[[[switch_bussiness_monitor builder] mergeFromInputStream:input] build];
}
+ (switch_bussiness_monitor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (switch_bussiness_monitor*)[[[switch_bussiness_monitor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (switch_bussiness_monitor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (switch_bussiness_monitor*)[[[switch_bussiness_monitor builder] mergeFromCodedInputStream:input] build];
}
+ (switch_bussiness_monitor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (switch_bussiness_monitor*)[[[switch_bussiness_monitor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (switch_bussiness_monitorBuilder*) builder {
  return [[switch_bussiness_monitorBuilder alloc] init];
}
+ (switch_bussiness_monitorBuilder*) builderWithPrototype:(switch_bussiness_monitor*) prototype {
  return [[switch_bussiness_monitor builder] mergeFrom:prototype];
}
- (switch_bussiness_monitorBuilder*) builder {
  return [switch_bussiness_monitor builder];
}
- (switch_bussiness_monitorBuilder*) toBuilder {
  return [switch_bussiness_monitor builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSwitches) {
    [output appendFormat:@"%@%@: %@\n", indent, @"switches", [NSNumber numberWithInteger:self.switches]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSwitches) {
    [dictionary setObject: [NSNumber numberWithInteger:self.switches] forKey: @"switches"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[switch_bussiness_monitor class]]) {
    return NO;
  }
  switch_bussiness_monitor *otherMessage = other;
  return
      self.hasSwitches == otherMessage.hasSwitches &&
      (!self.hasSwitches || self.switches == otherMessage.switches) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSwitches) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.switches] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface switch_bussiness_monitorBuilder()
@property (strong) switch_bussiness_monitor* resultSwitchBussinessMonitor;
@end

@implementation switch_bussiness_monitorBuilder
@synthesize resultSwitchBussinessMonitor;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSwitchBussinessMonitor = [[switch_bussiness_monitor alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSwitchBussinessMonitor;
}
- (switch_bussiness_monitorBuilder*) clear {
  self.resultSwitchBussinessMonitor = [[switch_bussiness_monitor alloc] init];
  return self;
}
- (switch_bussiness_monitorBuilder*) clone {
  return [switch_bussiness_monitor builderWithPrototype:resultSwitchBussinessMonitor];
}
- (switch_bussiness_monitor*) defaultInstance {
  return [switch_bussiness_monitor defaultInstance];
}
- (switch_bussiness_monitor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (switch_bussiness_monitor*) buildPartial {
  switch_bussiness_monitor* returnMe = resultSwitchBussinessMonitor;
  self.resultSwitchBussinessMonitor = nil;
  return returnMe;
}
- (switch_bussiness_monitorBuilder*) mergeFrom:(switch_bussiness_monitor*) other {
  if (other == [switch_bussiness_monitor defaultInstance]) {
    return self;
  }
  if (other.hasSwitches) {
    [self setSwitches:other.switches];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (switch_bussiness_monitorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (switch_bussiness_monitorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSwitches:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSwitches {
  return resultSwitchBussinessMonitor.hasSwitches;
}
- (UInt32) switches {
  return resultSwitchBussinessMonitor.switches;
}
- (switch_bussiness_monitorBuilder*) setSwitches:(UInt32) value {
  resultSwitchBussinessMonitor.hasSwitches = YES;
  resultSwitchBussinessMonitor.switches = value;
  return self;
}
- (switch_bussiness_monitorBuilder*) clearSwitches {
  resultSwitchBussinessMonitor.hasSwitches = NO;
  resultSwitchBussinessMonitor.switches = 0;
  return self;
}
@end

@interface query_bussiness_monitor_switches_ak ()
@property UInt32 switches;
@end

@implementation query_bussiness_monitor_switches_ak

- (BOOL) hasSwitches {
  return !!hasSwitches_;
}
- (void) setHasSwitches:(BOOL) _value_ {
  hasSwitches_ = !!_value_;
}
@synthesize switches;
- (instancetype) init {
  if ((self = [super init])) {
    self.switches = 0;
  }
  return self;
}
static query_bussiness_monitor_switches_ak* defaultquery_bussiness_monitor_switches_akInstance = nil;
+ (void) initialize {
  if (self == [query_bussiness_monitor_switches_ak class]) {
    defaultquery_bussiness_monitor_switches_akInstance = [[query_bussiness_monitor_switches_ak alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultquery_bussiness_monitor_switches_akInstance;
}
- (instancetype) defaultInstance {
  return defaultquery_bussiness_monitor_switches_akInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSwitches) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSwitches) {
    [output writeUInt32:1 value:self.switches];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSwitches) {
    size_ += computeUInt32Size(1, self.switches);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (query_bussiness_monitor_switches_ak*) parseFromData:(NSData*) data {
  return (query_bussiness_monitor_switches_ak*)[[[query_bussiness_monitor_switches_ak builder] mergeFromData:data] build];
}
+ (query_bussiness_monitor_switches_ak*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (query_bussiness_monitor_switches_ak*)[[[query_bussiness_monitor_switches_ak builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (query_bussiness_monitor_switches_ak*) parseFromInputStream:(NSInputStream*) input {
  return (query_bussiness_monitor_switches_ak*)[[[query_bussiness_monitor_switches_ak builder] mergeFromInputStream:input] build];
}
+ (query_bussiness_monitor_switches_ak*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (query_bussiness_monitor_switches_ak*)[[[query_bussiness_monitor_switches_ak builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (query_bussiness_monitor_switches_ak*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (query_bussiness_monitor_switches_ak*)[[[query_bussiness_monitor_switches_ak builder] mergeFromCodedInputStream:input] build];
}
+ (query_bussiness_monitor_switches_ak*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (query_bussiness_monitor_switches_ak*)[[[query_bussiness_monitor_switches_ak builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (query_bussiness_monitor_switches_akBuilder*) builder {
  return [[query_bussiness_monitor_switches_akBuilder alloc] init];
}
+ (query_bussiness_monitor_switches_akBuilder*) builderWithPrototype:(query_bussiness_monitor_switches_ak*) prototype {
  return [[query_bussiness_monitor_switches_ak builder] mergeFrom:prototype];
}
- (query_bussiness_monitor_switches_akBuilder*) builder {
  return [query_bussiness_monitor_switches_ak builder];
}
- (query_bussiness_monitor_switches_akBuilder*) toBuilder {
  return [query_bussiness_monitor_switches_ak builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSwitches) {
    [output appendFormat:@"%@%@: %@\n", indent, @"switches", [NSNumber numberWithInteger:self.switches]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSwitches) {
    [dictionary setObject: [NSNumber numberWithInteger:self.switches] forKey: @"switches"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[query_bussiness_monitor_switches_ak class]]) {
    return NO;
  }
  query_bussiness_monitor_switches_ak *otherMessage = other;
  return
      self.hasSwitches == otherMessage.hasSwitches &&
      (!self.hasSwitches || self.switches == otherMessage.switches) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSwitches) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.switches] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface query_bussiness_monitor_switches_akBuilder()
@property (strong) query_bussiness_monitor_switches_ak* resultQueryBussinessMonitorSwitchesAk;
@end

@implementation query_bussiness_monitor_switches_akBuilder
@synthesize resultQueryBussinessMonitorSwitchesAk;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQueryBussinessMonitorSwitchesAk = [[query_bussiness_monitor_switches_ak alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQueryBussinessMonitorSwitchesAk;
}
- (query_bussiness_monitor_switches_akBuilder*) clear {
  self.resultQueryBussinessMonitorSwitchesAk = [[query_bussiness_monitor_switches_ak alloc] init];
  return self;
}
- (query_bussiness_monitor_switches_akBuilder*) clone {
  return [query_bussiness_monitor_switches_ak builderWithPrototype:resultQueryBussinessMonitorSwitchesAk];
}
- (query_bussiness_monitor_switches_ak*) defaultInstance {
  return [query_bussiness_monitor_switches_ak defaultInstance];
}
- (query_bussiness_monitor_switches_ak*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (query_bussiness_monitor_switches_ak*) buildPartial {
  query_bussiness_monitor_switches_ak* returnMe = resultQueryBussinessMonitorSwitchesAk;
  self.resultQueryBussinessMonitorSwitchesAk = nil;
  return returnMe;
}
- (query_bussiness_monitor_switches_akBuilder*) mergeFrom:(query_bussiness_monitor_switches_ak*) other {
  if (other == [query_bussiness_monitor_switches_ak defaultInstance]) {
    return self;
  }
  if (other.hasSwitches) {
    [self setSwitches:other.switches];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (query_bussiness_monitor_switches_akBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (query_bussiness_monitor_switches_akBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSwitches:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSwitches {
  return resultQueryBussinessMonitorSwitchesAk.hasSwitches;
}
- (UInt32) switches {
  return resultQueryBussinessMonitorSwitchesAk.switches;
}
- (query_bussiness_monitor_switches_akBuilder*) setSwitches:(UInt32) value {
  resultQueryBussinessMonitorSwitchesAk.hasSwitches = YES;
  resultQueryBussinessMonitorSwitchesAk.switches = value;
  return self;
}
- (query_bussiness_monitor_switches_akBuilder*) clearSwitches {
  resultQueryBussinessMonitorSwitchesAk.hasSwitches = NO;
  resultQueryBussinessMonitorSwitchesAk.switches = 0;
  return self;
}
@end

@interface bussiness_monitor_request ()
@property (strong) NSMutableArray<monitor_bussiness_type*> * bussinessTypesArray;
@property UInt32 monitorType;
@end

@implementation bussiness_monitor_request

@synthesize bussinessTypesArray;
@dynamic bussinessTypes;
- (BOOL) hasMonitorType {
  return !!hasMonitorType_;
}
- (void) setHasMonitorType:(BOOL) _value_ {
  hasMonitorType_ = !!_value_;
}
@synthesize monitorType;
- (instancetype) init {
  if ((self = [super init])) {
    self.monitorType = 0;
  }
  return self;
}
static bussiness_monitor_request* defaultbussiness_monitor_requestInstance = nil;
+ (void) initialize {
  if (self == [bussiness_monitor_request class]) {
    defaultbussiness_monitor_requestInstance = [[bussiness_monitor_request alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultbussiness_monitor_requestInstance;
}
- (instancetype) defaultInstance {
  return defaultbussiness_monitor_requestInstance;
}
- (NSArray<monitor_bussiness_type*> *)bussinessTypes {
  return bussinessTypesArray;
}
- (monitor_bussiness_type*)bussinessTypesAtIndex:(NSUInteger)index {
  return [bussinessTypesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitbussinessTypes = YES;
   [self.bussinessTypes enumerateObjectsUsingBlock:^(monitor_bussiness_type *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbussinessTypes = NO;
      *stop = YES;
    }
  }];
  if (!isInitbussinessTypes) return isInitbussinessTypes;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.bussinessTypesArray enumerateObjectsUsingBlock:^(monitor_bussiness_type *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasMonitorType) {
    [output writeUInt32:2 value:self.monitorType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.bussinessTypesArray enumerateObjectsUsingBlock:^(monitor_bussiness_type *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasMonitorType) {
    size_ += computeUInt32Size(2, self.monitorType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (bussiness_monitor_request*) parseFromData:(NSData*) data {
  return (bussiness_monitor_request*)[[[bussiness_monitor_request builder] mergeFromData:data] build];
}
+ (bussiness_monitor_request*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_request*)[[[bussiness_monitor_request builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_request*) parseFromInputStream:(NSInputStream*) input {
  return (bussiness_monitor_request*)[[[bussiness_monitor_request builder] mergeFromInputStream:input] build];
}
+ (bussiness_monitor_request*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_request*)[[[bussiness_monitor_request builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_request*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (bussiness_monitor_request*)[[[bussiness_monitor_request builder] mergeFromCodedInputStream:input] build];
}
+ (bussiness_monitor_request*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_request*)[[[bussiness_monitor_request builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_requestBuilder*) builder {
  return [[bussiness_monitor_requestBuilder alloc] init];
}
+ (bussiness_monitor_requestBuilder*) builderWithPrototype:(bussiness_monitor_request*) prototype {
  return [[bussiness_monitor_request builder] mergeFrom:prototype];
}
- (bussiness_monitor_requestBuilder*) builder {
  return [bussiness_monitor_request builder];
}
- (bussiness_monitor_requestBuilder*) toBuilder {
  return [bussiness_monitor_request builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.bussinessTypesArray enumerateObjectsUsingBlock:^(monitor_bussiness_type *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bussinessTypes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMonitorType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monitorType", [NSNumber numberWithInteger:self.monitorType]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (monitor_bussiness_type* element in self.bussinessTypesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bussinessTypes"];
  }
  if (self.hasMonitorType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.monitorType] forKey: @"monitorType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[bussiness_monitor_request class]]) {
    return NO;
  }
  bussiness_monitor_request *otherMessage = other;
  return
      [self.bussinessTypesArray isEqualToArray:otherMessage.bussinessTypesArray] &&
      self.hasMonitorType == otherMessage.hasMonitorType &&
      (!self.hasMonitorType || self.monitorType == otherMessage.monitorType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.bussinessTypesArray enumerateObjectsUsingBlock:^(monitor_bussiness_type *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasMonitorType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monitorType] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface bussiness_monitor_requestBuilder()
@property (strong) bussiness_monitor_request* resultBussinessMonitorRequest;
@end

@implementation bussiness_monitor_requestBuilder
@synthesize resultBussinessMonitorRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBussinessMonitorRequest = [[bussiness_monitor_request alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBussinessMonitorRequest;
}
- (bussiness_monitor_requestBuilder*) clear {
  self.resultBussinessMonitorRequest = [[bussiness_monitor_request alloc] init];
  return self;
}
- (bussiness_monitor_requestBuilder*) clone {
  return [bussiness_monitor_request builderWithPrototype:resultBussinessMonitorRequest];
}
- (bussiness_monitor_request*) defaultInstance {
  return [bussiness_monitor_request defaultInstance];
}
- (bussiness_monitor_request*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (bussiness_monitor_request*) buildPartial {
  bussiness_monitor_request* returnMe = resultBussinessMonitorRequest;
  self.resultBussinessMonitorRequest = nil;
  return returnMe;
}
- (bussiness_monitor_requestBuilder*) mergeFrom:(bussiness_monitor_request*) other {
  if (other == [bussiness_monitor_request defaultInstance]) {
    return self;
  }
  if (other.bussinessTypesArray.count > 0) {
    if (resultBussinessMonitorRequest.bussinessTypesArray == nil) {
      resultBussinessMonitorRequest.bussinessTypesArray = [[NSMutableArray alloc] initWithArray:other.bussinessTypesArray];
    } else {
      [resultBussinessMonitorRequest.bussinessTypesArray addObjectsFromArray:other.bussinessTypesArray];
    }
  }
  if (other.hasMonitorType) {
    [self setMonitorType:other.monitorType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (bussiness_monitor_requestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (bussiness_monitor_requestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        monitor_bussiness_typeBuilder* subBuilder = [monitor_bussiness_type builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBussinessTypes:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setMonitorType:[input readUInt32]];
        break;
      }
    }
  }
}
- (NSMutableArray<monitor_bussiness_type*> *)bussinessTypes {
  return resultBussinessMonitorRequest.bussinessTypesArray;
}
- (monitor_bussiness_type*)bussinessTypesAtIndex:(NSUInteger)index {
  return [resultBussinessMonitorRequest bussinessTypesAtIndex:index];
}
- (bussiness_monitor_requestBuilder *)addBussinessTypes:(monitor_bussiness_type*)value {
  if (resultBussinessMonitorRequest.bussinessTypesArray == nil) {
    resultBussinessMonitorRequest.bussinessTypesArray = [[NSMutableArray alloc]init];
  }
  [resultBussinessMonitorRequest.bussinessTypesArray addObject:value];
  return self;
}
- (bussiness_monitor_requestBuilder *)setBussinessTypesArray:(NSArray<monitor_bussiness_type*> *)array {
  resultBussinessMonitorRequest.bussinessTypesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (bussiness_monitor_requestBuilder *)clearBussinessTypes {
  resultBussinessMonitorRequest.bussinessTypesArray = nil;
  return self;
}
- (BOOL) hasMonitorType {
  return resultBussinessMonitorRequest.hasMonitorType;
}
- (UInt32) monitorType {
  return resultBussinessMonitorRequest.monitorType;
}
- (bussiness_monitor_requestBuilder*) setMonitorType:(UInt32) value {
  resultBussinessMonitorRequest.hasMonitorType = YES;
  resultBussinessMonitorRequest.monitorType = value;
  return self;
}
- (bussiness_monitor_requestBuilder*) clearMonitorType {
  resultBussinessMonitorRequest.hasMonitorType = NO;
  resultBussinessMonitorRequest.monitorType = 0;
  return self;
}
@end

@interface bussiness_monitor_request_ak ()
@property (strong) NSMutableArray<bussiness_monitor_item*> * itemsArray;
@end

@implementation bussiness_monitor_request_ak

@synthesize itemsArray;
@dynamic items;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static bussiness_monitor_request_ak* defaultbussiness_monitor_request_akInstance = nil;
+ (void) initialize {
  if (self == [bussiness_monitor_request_ak class]) {
    defaultbussiness_monitor_request_akInstance = [[bussiness_monitor_request_ak alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultbussiness_monitor_request_akInstance;
}
- (instancetype) defaultInstance {
  return defaultbussiness_monitor_request_akInstance;
}
- (NSArray<bussiness_monitor_item*> *)items {
  return itemsArray;
}
- (bussiness_monitor_item*)itemsAtIndex:(NSUInteger)index {
  return [itemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInititems = YES;
   [self.items enumerateObjectsUsingBlock:^(bussiness_monitor_item *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititems = NO;
      *stop = YES;
    }
  }];
  if (!isInititems) return isInititems;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.itemsArray enumerateObjectsUsingBlock:^(bussiness_monitor_item *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.itemsArray enumerateObjectsUsingBlock:^(bussiness_monitor_item *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (bussiness_monitor_request_ak*) parseFromData:(NSData*) data {
  return (bussiness_monitor_request_ak*)[[[bussiness_monitor_request_ak builder] mergeFromData:data] build];
}
+ (bussiness_monitor_request_ak*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_request_ak*)[[[bussiness_monitor_request_ak builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_request_ak*) parseFromInputStream:(NSInputStream*) input {
  return (bussiness_monitor_request_ak*)[[[bussiness_monitor_request_ak builder] mergeFromInputStream:input] build];
}
+ (bussiness_monitor_request_ak*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_request_ak*)[[[bussiness_monitor_request_ak builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_request_ak*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (bussiness_monitor_request_ak*)[[[bussiness_monitor_request_ak builder] mergeFromCodedInputStream:input] build];
}
+ (bussiness_monitor_request_ak*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (bussiness_monitor_request_ak*)[[[bussiness_monitor_request_ak builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (bussiness_monitor_request_akBuilder*) builder {
  return [[bussiness_monitor_request_akBuilder alloc] init];
}
+ (bussiness_monitor_request_akBuilder*) builderWithPrototype:(bussiness_monitor_request_ak*) prototype {
  return [[bussiness_monitor_request_ak builder] mergeFrom:prototype];
}
- (bussiness_monitor_request_akBuilder*) builder {
  return [bussiness_monitor_request_ak builder];
}
- (bussiness_monitor_request_akBuilder*) toBuilder {
  return [bussiness_monitor_request_ak builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.itemsArray enumerateObjectsUsingBlock:^(bussiness_monitor_item *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"items"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (bussiness_monitor_item* element in self.itemsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"items"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[bussiness_monitor_request_ak class]]) {
    return NO;
  }
  bussiness_monitor_request_ak *otherMessage = other;
  return
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.itemsArray enumerateObjectsUsingBlock:^(bussiness_monitor_item *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface bussiness_monitor_request_akBuilder()
@property (strong) bussiness_monitor_request_ak* resultBussinessMonitorRequestAk;
@end

@implementation bussiness_monitor_request_akBuilder
@synthesize resultBussinessMonitorRequestAk;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBussinessMonitorRequestAk = [[bussiness_monitor_request_ak alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBussinessMonitorRequestAk;
}
- (bussiness_monitor_request_akBuilder*) clear {
  self.resultBussinessMonitorRequestAk = [[bussiness_monitor_request_ak alloc] init];
  return self;
}
- (bussiness_monitor_request_akBuilder*) clone {
  return [bussiness_monitor_request_ak builderWithPrototype:resultBussinessMonitorRequestAk];
}
- (bussiness_monitor_request_ak*) defaultInstance {
  return [bussiness_monitor_request_ak defaultInstance];
}
- (bussiness_monitor_request_ak*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (bussiness_monitor_request_ak*) buildPartial {
  bussiness_monitor_request_ak* returnMe = resultBussinessMonitorRequestAk;
  self.resultBussinessMonitorRequestAk = nil;
  return returnMe;
}
- (bussiness_monitor_request_akBuilder*) mergeFrom:(bussiness_monitor_request_ak*) other {
  if (other == [bussiness_monitor_request_ak defaultInstance]) {
    return self;
  }
  if (other.itemsArray.count > 0) {
    if (resultBussinessMonitorRequestAk.itemsArray == nil) {
      resultBussinessMonitorRequestAk.itemsArray = [[NSMutableArray alloc] initWithArray:other.itemsArray];
    } else {
      [resultBussinessMonitorRequestAk.itemsArray addObjectsFromArray:other.itemsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (bussiness_monitor_request_akBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (bussiness_monitor_request_akBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        bussiness_monitor_itemBuilder* subBuilder = [bussiness_monitor_item builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<bussiness_monitor_item*> *)items {
  return resultBussinessMonitorRequestAk.itemsArray;
}
- (bussiness_monitor_item*)itemsAtIndex:(NSUInteger)index {
  return [resultBussinessMonitorRequestAk itemsAtIndex:index];
}
- (bussiness_monitor_request_akBuilder *)addItems:(bussiness_monitor_item*)value {
  if (resultBussinessMonitorRequestAk.itemsArray == nil) {
    resultBussinessMonitorRequestAk.itemsArray = [[NSMutableArray alloc]init];
  }
  [resultBussinessMonitorRequestAk.itemsArray addObject:value];
  return self;
}
- (bussiness_monitor_request_akBuilder *)setItemsArray:(NSArray<bussiness_monitor_item*> *)array {
  resultBussinessMonitorRequestAk.itemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (bussiness_monitor_request_akBuilder *)clearItems {
  resultBussinessMonitorRequestAk.itemsArray = nil;
  return self;
}
@end

@interface status_monitor_request ()
@property (strong) NSMutableArray * userNamesArray;
@end

@implementation status_monitor_request

@synthesize userNamesArray;
@dynamic userNames;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static status_monitor_request* defaultstatus_monitor_requestInstance = nil;
+ (void) initialize {
  if (self == [status_monitor_request class]) {
    defaultstatus_monitor_requestInstance = [[status_monitor_request alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultstatus_monitor_requestInstance;
}
- (instancetype) defaultInstance {
  return defaultstatus_monitor_requestInstance;
}
- (NSArray *)userNames {
  return userNamesArray;
}
- (NSString*)userNamesAtIndex:(NSUInteger)index {
  return [userNamesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userNamesArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userNamesArray.count;
    [self.userNamesArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (status_monitor_request*) parseFromData:(NSData*) data {
  return (status_monitor_request*)[[[status_monitor_request builder] mergeFromData:data] build];
}
+ (status_monitor_request*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (status_monitor_request*)[[[status_monitor_request builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (status_monitor_request*) parseFromInputStream:(NSInputStream*) input {
  return (status_monitor_request*)[[[status_monitor_request builder] mergeFromInputStream:input] build];
}
+ (status_monitor_request*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (status_monitor_request*)[[[status_monitor_request builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (status_monitor_request*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (status_monitor_request*)[[[status_monitor_request builder] mergeFromCodedInputStream:input] build];
}
+ (status_monitor_request*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (status_monitor_request*)[[[status_monitor_request builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (status_monitor_requestBuilder*) builder {
  return [[status_monitor_requestBuilder alloc] init];
}
+ (status_monitor_requestBuilder*) builderWithPrototype:(status_monitor_request*) prototype {
  return [[status_monitor_request builder] mergeFrom:prototype];
}
- (status_monitor_requestBuilder*) builder {
  return [status_monitor_request builder];
}
- (status_monitor_requestBuilder*) toBuilder {
  return [status_monitor_request builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userNamesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userNames", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.userNames forKey: @"userNames"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[status_monitor_request class]]) {
    return NO;
  }
  status_monitor_request *otherMessage = other;
  return
      [self.userNamesArray isEqualToArray:otherMessage.userNamesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userNamesArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface status_monitor_requestBuilder()
@property (strong) status_monitor_request* resultStatusMonitorRequest;
@end

@implementation status_monitor_requestBuilder
@synthesize resultStatusMonitorRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStatusMonitorRequest = [[status_monitor_request alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStatusMonitorRequest;
}
- (status_monitor_requestBuilder*) clear {
  self.resultStatusMonitorRequest = [[status_monitor_request alloc] init];
  return self;
}
- (status_monitor_requestBuilder*) clone {
  return [status_monitor_request builderWithPrototype:resultStatusMonitorRequest];
}
- (status_monitor_request*) defaultInstance {
  return [status_monitor_request defaultInstance];
}
- (status_monitor_request*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (status_monitor_request*) buildPartial {
  status_monitor_request* returnMe = resultStatusMonitorRequest;
  self.resultStatusMonitorRequest = nil;
  return returnMe;
}
- (status_monitor_requestBuilder*) mergeFrom:(status_monitor_request*) other {
  if (other == [status_monitor_request defaultInstance]) {
    return self;
  }
  if (other.userNamesArray.count > 0) {
    if (resultStatusMonitorRequest.userNamesArray == nil) {
      resultStatusMonitorRequest.userNamesArray = [[NSMutableArray alloc] initWithArray:other.userNamesArray];
    } else {
      [resultStatusMonitorRequest.userNamesArray addObjectsFromArray:other.userNamesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (status_monitor_requestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (status_monitor_requestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addUserNames:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userNames {
  return resultStatusMonitorRequest.userNamesArray;
}
- (NSString*)userNamesAtIndex:(NSUInteger)index {
  return [resultStatusMonitorRequest userNamesAtIndex:index];
}
- (status_monitor_requestBuilder *)addUserNames:(NSString*)value {
  if (resultStatusMonitorRequest.userNamesArray == nil) {
    resultStatusMonitorRequest.userNamesArray = [[NSMutableArray alloc]init];
  }
  [resultStatusMonitorRequest.userNamesArray addObject:value];
  return self;
}
- (status_monitor_requestBuilder *)setUserNamesArray:(NSArray *)array {
  resultStatusMonitorRequest.userNamesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (status_monitor_requestBuilder *)clearUserNames {
  resultStatusMonitorRequest.userNamesArray = nil;
  return self;
}
@end

@interface status_monitor_request_ak ()
@property (strong) NSMutableArray<monitor_user_status*> * userStatusesArray;
@end

@implementation status_monitor_request_ak

@synthesize userStatusesArray;
@dynamic userStatuses;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static status_monitor_request_ak* defaultstatus_monitor_request_akInstance = nil;
+ (void) initialize {
  if (self == [status_monitor_request_ak class]) {
    defaultstatus_monitor_request_akInstance = [[status_monitor_request_ak alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultstatus_monitor_request_akInstance;
}
- (instancetype) defaultInstance {
  return defaultstatus_monitor_request_akInstance;
}
- (NSArray<monitor_user_status*> *)userStatuses {
  return userStatusesArray;
}
- (monitor_user_status*)userStatusesAtIndex:(NSUInteger)index {
  return [userStatusesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInituserStatuses = YES;
   [self.userStatuses enumerateObjectsUsingBlock:^(monitor_user_status *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserStatuses = NO;
      *stop = YES;
    }
  }];
  if (!isInituserStatuses) return isInituserStatuses;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userStatusesArray enumerateObjectsUsingBlock:^(monitor_user_status *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userStatusesArray enumerateObjectsUsingBlock:^(monitor_user_status *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (status_monitor_request_ak*) parseFromData:(NSData*) data {
  return (status_monitor_request_ak*)[[[status_monitor_request_ak builder] mergeFromData:data] build];
}
+ (status_monitor_request_ak*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (status_monitor_request_ak*)[[[status_monitor_request_ak builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (status_monitor_request_ak*) parseFromInputStream:(NSInputStream*) input {
  return (status_monitor_request_ak*)[[[status_monitor_request_ak builder] mergeFromInputStream:input] build];
}
+ (status_monitor_request_ak*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (status_monitor_request_ak*)[[[status_monitor_request_ak builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (status_monitor_request_ak*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (status_monitor_request_ak*)[[[status_monitor_request_ak builder] mergeFromCodedInputStream:input] build];
}
+ (status_monitor_request_ak*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (status_monitor_request_ak*)[[[status_monitor_request_ak builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (status_monitor_request_akBuilder*) builder {
  return [[status_monitor_request_akBuilder alloc] init];
}
+ (status_monitor_request_akBuilder*) builderWithPrototype:(status_monitor_request_ak*) prototype {
  return [[status_monitor_request_ak builder] mergeFrom:prototype];
}
- (status_monitor_request_akBuilder*) builder {
  return [status_monitor_request_ak builder];
}
- (status_monitor_request_akBuilder*) toBuilder {
  return [status_monitor_request_ak builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userStatusesArray enumerateObjectsUsingBlock:^(monitor_user_status *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStatuses"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (monitor_user_status* element in self.userStatusesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userStatuses"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[status_monitor_request_ak class]]) {
    return NO;
  }
  status_monitor_request_ak *otherMessage = other;
  return
      [self.userStatusesArray isEqualToArray:otherMessage.userStatusesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userStatusesArray enumerateObjectsUsingBlock:^(monitor_user_status *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface status_monitor_request_akBuilder()
@property (strong) status_monitor_request_ak* resultStatusMonitorRequestAk;
@end

@implementation status_monitor_request_akBuilder
@synthesize resultStatusMonitorRequestAk;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStatusMonitorRequestAk = [[status_monitor_request_ak alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStatusMonitorRequestAk;
}
- (status_monitor_request_akBuilder*) clear {
  self.resultStatusMonitorRequestAk = [[status_monitor_request_ak alloc] init];
  return self;
}
- (status_monitor_request_akBuilder*) clone {
  return [status_monitor_request_ak builderWithPrototype:resultStatusMonitorRequestAk];
}
- (status_monitor_request_ak*) defaultInstance {
  return [status_monitor_request_ak defaultInstance];
}
- (status_monitor_request_ak*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (status_monitor_request_ak*) buildPartial {
  status_monitor_request_ak* returnMe = resultStatusMonitorRequestAk;
  self.resultStatusMonitorRequestAk = nil;
  return returnMe;
}
- (status_monitor_request_akBuilder*) mergeFrom:(status_monitor_request_ak*) other {
  if (other == [status_monitor_request_ak defaultInstance]) {
    return self;
  }
  if (other.userStatusesArray.count > 0) {
    if (resultStatusMonitorRequestAk.userStatusesArray == nil) {
      resultStatusMonitorRequestAk.userStatusesArray = [[NSMutableArray alloc] initWithArray:other.userStatusesArray];
    } else {
      [resultStatusMonitorRequestAk.userStatusesArray addObjectsFromArray:other.userStatusesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (status_monitor_request_akBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (status_monitor_request_akBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        monitor_user_statusBuilder* subBuilder = [monitor_user_status builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserStatuses:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<monitor_user_status*> *)userStatuses {
  return resultStatusMonitorRequestAk.userStatusesArray;
}
- (monitor_user_status*)userStatusesAtIndex:(NSUInteger)index {
  return [resultStatusMonitorRequestAk userStatusesAtIndex:index];
}
- (status_monitor_request_akBuilder *)addUserStatuses:(monitor_user_status*)value {
  if (resultStatusMonitorRequestAk.userStatusesArray == nil) {
    resultStatusMonitorRequestAk.userStatusesArray = [[NSMutableArray alloc]init];
  }
  [resultStatusMonitorRequestAk.userStatusesArray addObject:value];
  return self;
}
- (status_monitor_request_akBuilder *)setUserStatusesArray:(NSArray<monitor_user_status*> *)array {
  resultStatusMonitorRequestAk.userStatusesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (status_monitor_request_akBuilder *)clearUserStatuses {
  resultStatusMonitorRequestAk.userStatusesArray = nil;
  return self;
}
@end

@interface queue_monitor_request ()
@property (strong) PBAppendableArray * queueTypesArray;
@end

@implementation queue_monitor_request

@synthesize queueTypesArray;
@dynamic queueTypes;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static queue_monitor_request* defaultqueue_monitor_requestInstance = nil;
+ (void) initialize {
  if (self == [queue_monitor_request class]) {
    defaultqueue_monitor_requestInstance = [[queue_monitor_request alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultqueue_monitor_requestInstance;
}
- (instancetype) defaultInstance {
  return defaultqueue_monitor_requestInstance;
}
- (PBArray *)queueTypes {
  return queueTypesArray;
}
- (UInt32)queueTypesAtIndex:(NSUInteger)index {
  return [queueTypesArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger queueTypesArrayCount = self.queueTypesArray.count;
  if (queueTypesArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.queueTypesArray.data;
    for (NSUInteger i = 0; i < queueTypesArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.queueTypesArray.count;
    const UInt32 *values = (const UInt32 *)self.queueTypesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (queue_monitor_request*) parseFromData:(NSData*) data {
  return (queue_monitor_request*)[[[queue_monitor_request builder] mergeFromData:data] build];
}
+ (queue_monitor_request*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_request*)[[[queue_monitor_request builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_request*) parseFromInputStream:(NSInputStream*) input {
  return (queue_monitor_request*)[[[queue_monitor_request builder] mergeFromInputStream:input] build];
}
+ (queue_monitor_request*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_request*)[[[queue_monitor_request builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_request*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (queue_monitor_request*)[[[queue_monitor_request builder] mergeFromCodedInputStream:input] build];
}
+ (queue_monitor_request*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_request*)[[[queue_monitor_request builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_requestBuilder*) builder {
  return [[queue_monitor_requestBuilder alloc] init];
}
+ (queue_monitor_requestBuilder*) builderWithPrototype:(queue_monitor_request*) prototype {
  return [[queue_monitor_request builder] mergeFrom:prototype];
}
- (queue_monitor_requestBuilder*) builder {
  return [queue_monitor_request builder];
}
- (queue_monitor_requestBuilder*) toBuilder {
  return [queue_monitor_request builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.queueTypesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"queueTypes", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * queueTypesArrayArray = [NSMutableArray new];
  NSUInteger queueTypesArrayCount=self.queueTypesArray.count;
  for(int i=0;i<queueTypesArrayCount;i++){
    [queueTypesArrayArray addObject: @([self.queueTypesArray uint32AtIndex:i])];
  }
  [dictionary setObject: queueTypesArrayArray forKey: @"queueTypes"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[queue_monitor_request class]]) {
    return NO;
  }
  queue_monitor_request *otherMessage = other;
  return
      [self.queueTypesArray isEqualToArray:otherMessage.queueTypesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.queueTypesArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface queue_monitor_requestBuilder()
@property (strong) queue_monitor_request* resultQueueMonitorRequest;
@end

@implementation queue_monitor_requestBuilder
@synthesize resultQueueMonitorRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQueueMonitorRequest = [[queue_monitor_request alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQueueMonitorRequest;
}
- (queue_monitor_requestBuilder*) clear {
  self.resultQueueMonitorRequest = [[queue_monitor_request alloc] init];
  return self;
}
- (queue_monitor_requestBuilder*) clone {
  return [queue_monitor_request builderWithPrototype:resultQueueMonitorRequest];
}
- (queue_monitor_request*) defaultInstance {
  return [queue_monitor_request defaultInstance];
}
- (queue_monitor_request*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (queue_monitor_request*) buildPartial {
  queue_monitor_request* returnMe = resultQueueMonitorRequest;
  self.resultQueueMonitorRequest = nil;
  return returnMe;
}
- (queue_monitor_requestBuilder*) mergeFrom:(queue_monitor_request*) other {
  if (other == [queue_monitor_request defaultInstance]) {
    return self;
  }
  if (other.queueTypesArray.count > 0) {
    if (resultQueueMonitorRequest.queueTypesArray == nil) {
      resultQueueMonitorRequest.queueTypesArray = [other.queueTypesArray copy];
    } else {
      [resultQueueMonitorRequest.queueTypesArray appendArray:other.queueTypesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (queue_monitor_requestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (queue_monitor_requestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addQueueTypes:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)queueTypes {
  return resultQueueMonitorRequest.queueTypesArray;
}
- (UInt32)queueTypesAtIndex:(NSUInteger)index {
  return [resultQueueMonitorRequest queueTypesAtIndex:index];
}
- (queue_monitor_requestBuilder *)addQueueTypes:(UInt32)value {
  if (resultQueueMonitorRequest.queueTypesArray == nil) {
    resultQueueMonitorRequest.queueTypesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultQueueMonitorRequest.queueTypesArray addUint32:value];
  return self;
}
- (queue_monitor_requestBuilder *)setQueueTypesArray:(NSArray *)array {
  resultQueueMonitorRequest.queueTypesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (queue_monitor_requestBuilder *)setQueueTypesValues:(const UInt32 *)values count:(NSUInteger)count {
  resultQueueMonitorRequest.queueTypesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (queue_monitor_requestBuilder *)clearQueueTypes {
  resultQueueMonitorRequest.queueTypesArray = nil;
  return self;
}
@end

@interface queue_monitor_request_ak ()
@property (strong) NSMutableArray<queue_monitor_infos*> * queueInfosArray;
@end

@implementation queue_monitor_request_ak

@synthesize queueInfosArray;
@dynamic queueInfos;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static queue_monitor_request_ak* defaultqueue_monitor_request_akInstance = nil;
+ (void) initialize {
  if (self == [queue_monitor_request_ak class]) {
    defaultqueue_monitor_request_akInstance = [[queue_monitor_request_ak alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultqueue_monitor_request_akInstance;
}
- (instancetype) defaultInstance {
  return defaultqueue_monitor_request_akInstance;
}
- (NSArray<queue_monitor_infos*> *)queueInfos {
  return queueInfosArray;
}
- (queue_monitor_infos*)queueInfosAtIndex:(NSUInteger)index {
  return [queueInfosArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitqueueInfos = YES;
   [self.queueInfos enumerateObjectsUsingBlock:^(queue_monitor_infos *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitqueueInfos = NO;
      *stop = YES;
    }
  }];
  if (!isInitqueueInfos) return isInitqueueInfos;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.queueInfosArray enumerateObjectsUsingBlock:^(queue_monitor_infos *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.queueInfosArray enumerateObjectsUsingBlock:^(queue_monitor_infos *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (queue_monitor_request_ak*) parseFromData:(NSData*) data {
  return (queue_monitor_request_ak*)[[[queue_monitor_request_ak builder] mergeFromData:data] build];
}
+ (queue_monitor_request_ak*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_request_ak*)[[[queue_monitor_request_ak builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_request_ak*) parseFromInputStream:(NSInputStream*) input {
  return (queue_monitor_request_ak*)[[[queue_monitor_request_ak builder] mergeFromInputStream:input] build];
}
+ (queue_monitor_request_ak*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_request_ak*)[[[queue_monitor_request_ak builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_request_ak*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (queue_monitor_request_ak*)[[[queue_monitor_request_ak builder] mergeFromCodedInputStream:input] build];
}
+ (queue_monitor_request_ak*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (queue_monitor_request_ak*)[[[queue_monitor_request_ak builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (queue_monitor_request_akBuilder*) builder {
  return [[queue_monitor_request_akBuilder alloc] init];
}
+ (queue_monitor_request_akBuilder*) builderWithPrototype:(queue_monitor_request_ak*) prototype {
  return [[queue_monitor_request_ak builder] mergeFrom:prototype];
}
- (queue_monitor_request_akBuilder*) builder {
  return [queue_monitor_request_ak builder];
}
- (queue_monitor_request_akBuilder*) toBuilder {
  return [queue_monitor_request_ak builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.queueInfosArray enumerateObjectsUsingBlock:^(queue_monitor_infos *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"queueInfos"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (queue_monitor_infos* element in self.queueInfosArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"queueInfos"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[queue_monitor_request_ak class]]) {
    return NO;
  }
  queue_monitor_request_ak *otherMessage = other;
  return
      [self.queueInfosArray isEqualToArray:otherMessage.queueInfosArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.queueInfosArray enumerateObjectsUsingBlock:^(queue_monitor_infos *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface queue_monitor_request_akBuilder()
@property (strong) queue_monitor_request_ak* resultQueueMonitorRequestAk;
@end

@implementation queue_monitor_request_akBuilder
@synthesize resultQueueMonitorRequestAk;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQueueMonitorRequestAk = [[queue_monitor_request_ak alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQueueMonitorRequestAk;
}
- (queue_monitor_request_akBuilder*) clear {
  self.resultQueueMonitorRequestAk = [[queue_monitor_request_ak alloc] init];
  return self;
}
- (queue_monitor_request_akBuilder*) clone {
  return [queue_monitor_request_ak builderWithPrototype:resultQueueMonitorRequestAk];
}
- (queue_monitor_request_ak*) defaultInstance {
  return [queue_monitor_request_ak defaultInstance];
}
- (queue_monitor_request_ak*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (queue_monitor_request_ak*) buildPartial {
  queue_monitor_request_ak* returnMe = resultQueueMonitorRequestAk;
  self.resultQueueMonitorRequestAk = nil;
  return returnMe;
}
- (queue_monitor_request_akBuilder*) mergeFrom:(queue_monitor_request_ak*) other {
  if (other == [queue_monitor_request_ak defaultInstance]) {
    return self;
  }
  if (other.queueInfosArray.count > 0) {
    if (resultQueueMonitorRequestAk.queueInfosArray == nil) {
      resultQueueMonitorRequestAk.queueInfosArray = [[NSMutableArray alloc] initWithArray:other.queueInfosArray];
    } else {
      [resultQueueMonitorRequestAk.queueInfosArray addObjectsFromArray:other.queueInfosArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (queue_monitor_request_akBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (queue_monitor_request_akBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        queue_monitor_infosBuilder* subBuilder = [queue_monitor_infos builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQueueInfos:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<queue_monitor_infos*> *)queueInfos {
  return resultQueueMonitorRequestAk.queueInfosArray;
}
- (queue_monitor_infos*)queueInfosAtIndex:(NSUInteger)index {
  return [resultQueueMonitorRequestAk queueInfosAtIndex:index];
}
- (queue_monitor_request_akBuilder *)addQueueInfos:(queue_monitor_infos*)value {
  if (resultQueueMonitorRequestAk.queueInfosArray == nil) {
    resultQueueMonitorRequestAk.queueInfosArray = [[NSMutableArray alloc]init];
  }
  [resultQueueMonitorRequestAk.queueInfosArray addObject:value];
  return self;
}
- (queue_monitor_request_akBuilder *)setQueueInfosArray:(NSArray<queue_monitor_infos*> *)array {
  resultQueueMonitorRequestAk.queueInfosArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (queue_monitor_request_akBuilder *)clearQueueInfos {
  resultQueueMonitorRequestAk.queueInfosArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
